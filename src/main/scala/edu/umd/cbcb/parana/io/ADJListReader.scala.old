package edu.umd.cbcb.parana.io

import scala.util.parsing.combinator._
import scala.reflect._
import scala.collection.mutable.{ Set => MSet, Map => MMap }
import java.io.{ FileReader => JFileReader }

import scalax.collection.mutable.{ Graph => MGraph }

import edu.umd.cbcb.parana.graphtools.SimpleNode

// Holy crap!  Parser combinators are awesome!
class ADJListParser[NodeType] extends JavaTokenParsers {
  override def skipWhitespace = false

  val anything : Parser[String] = """[\s\S&&[^\n]]+""".r
  val anyPrintable : Parser[String] = """[\S&&[^#\n]]+""".r
  val space : Parser[String] = """[ \t\x0B\f\r]+""".r
  val number : Parser[String]  = """(?:[-+]?[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)|[+-]?\d+""".r
  val newline : Parser[String] = """\n""".r

  def graph : Parser[ List[(String, List[String])] ] =
    (
      repsep((commentLine|nodeLine), newline)~opt(newline) ^^ { case x~n => x.collect{ case Some(x) => x } }
    )

  def nodeLine : Parser[ Option[ (String, List[String]) ] ] =
    (
      anyPrintable~space~repsep(anyPrintable,space)~opt(space)~opt(commentLine) ^^ { case f~s1~t~s2~c => Some( (f, t) ) }
     |anyPrintable~opt(space)~opt(commentLine) ^^ { case f~s~c => Some( (f, List.empty[String]) ) }
    )

  def commentLine : Parser[ Option[ (String, List[String]) ] ] =
    (
     "#"~anything ^^ { case x => Option.empty[ (String, List[String]) ] }
    )
}

class ADJListReader[NT, GT <: Graph[NT,DefaultEdge]]( filename:String, nodeFact : (String, Int) => NT, graphFact : (EdgeFactory[NT,DefaultEdge]) => GT ) {
  val G = graphFact( new ClassBasedEdgeFactory[NT, DefaultEdge](classOf[DefaultEdge]) )

  def parse : GT = {

    val gparser = new ADJListParser
    val res = gparser.parseAll(gparser.graph, new JFileReader(filename))

    val nameMap = MMap.empty[String, NT]
    val adjList = res.get

    for ( (f,t) <- adjList ) {
      val from = nameMap.getOrElseUpdate(f, nodeFact(f,0))
      if (! G.containsVertex(from) ){ G.addVertex(from) }
      for ( tn <- t ) {
	val tgt = nameMap.getOrElseUpdate(tn, nodeFact(tn,0))
	if (! G.containsVertex(tgt) ){ G.addVertex(tgt) }
	G.addEdge(from, tgt)
      }
    }

    G
  }

}
